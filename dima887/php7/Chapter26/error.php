<?php

/**
 * *******   Обработка ошибок и исключений   ********
*/

/**
 * Значения ошибок
 *
 * 1. Ошибочная ситуация - пропущена скобка
 * 2. Внутренняя ошибка - открытие несуществующего файла
 * 3. Пользовательская ошибка - введен неверный пароль
 */


/**
 * Перехват ошибок и предупреждений.
 */

// Определяем новую функцию-обработчик.
function myErrorHandler($errno, $msg, $file, $line)
{
    // Если используется @, ничего не делать.
    if (error_reporting() == 0) return;
    // Иначе - выводим сообщение.
    echo '<div style="border-style:inset; border-width:2px">';
    echo "Произошла ошибка с кодом <b>$errno</b>!<br />";
    echo "Файл: <tt>$file</tt>, строка $line.<br />";
    echo "Текст ошибки: <i>$msg</i>";
    echo "</div>";
}
// Регистрируем ее для всех типов ошибок.
//set_error_handler("myErrorHandler", E_ALL);
// Вызываем функцию для несуществующего файла, чтобы
// сгенерировать предупреждение, которое будет перехвачено.
//filemtime("spoon");


/**
 * Использование функции trigger_error().
 */

function print_age($age)
{
    $age = intval($age);
    if ($age < 0)
    {
        trigger_error("Функция print_age(): ".
            "возраст не может быть".
            " отрицательным", E_USER_ERROR);
    }
    echo "Возраст составляет: $age";
}

// Вызов функции с отрицательным аргументом
//print_age(-10);


/**
 * Вывод дерева вызовов функции.
 */

function inner($a)
{
    // Внутренняя функция.
    echo "<pre>"; print_r(debug_backtrace()); echo "</pre>";
}
function outer($x)
{
    // Родительская функция.
    inner($x * $x);
}
// Главная программа.
outer(3);