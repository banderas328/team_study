<?php

/**
 * *********   Арифметические операции   **********

 a + b - сложение
 a - b - вычитание
 a * b - умножение
 a / b - деление
 a % b - остаток от деления a на b
 a ** b - возведение a в степень b
 a ** 0.5 - извлечь квадратный корень
*/


/**
 *  *********  Строковые операции   **********

 a.b - слияние строк a и b
 a[n] - симво строки в позиции n
*/


/**
 *  *********  Операции присваивания   *********

 = оператор присваивания
 $num = 5;
 $a = ($b = 4) + 5; //$a = 9; $b = 4;
 $num += 2; //$num = 7; прибавит 2 к $num
 $message = "Woken";
 $message .= " up $num times!"; //Woken up 7 times!
*/


/**
 *  ********* Инкремент и Декремент   ***********

 $a = 5;
 $a++ Постфиксный инкремент  Возвращает $a, затем прибавляет 1
 $a-- Постфиксный декремент  Возвращает $a, затем уменьшает на 1
 ++$a Префиксный инкремент   Прибавляет 1, затем возвращает $a
 --$a Префиксный декремент   Уменьшает на 1, затем возвращает $a
*/


/**
 *  **********   Битовые операции   ******** https://youtu.be/nSoPJoBBdWA

 $a = 6;   //в двоичной системе 0110
 $b = 10;  //в двоичной системе 1010

* Поразрядное пересечение
 a & b - число с установленными битами, которые выставлены и в 'а' и в 'b' одновременно
     a  b  result
     0  0  0
     0  1  0
     1  0  0
     1  1  1
 echo 6 & 10; // 2; в двоичной системе 0010

* Поразрядное объединение
 a | b - число с установленными битами, которые выставлены либо в 'a', либо 'b', либо одновременно
     a  b  result
     0  0  0
     0  1  1
     1  0  1
     1  1  1
 echo 6 | 10; //14; в двоичной системе 1110

* Поразрядное исключение
 a ^ b - число с установлеными битами, которые выставлены либо в 'a', либо в 'b'
     a  b  result
     0  0  0
     0  1  1
     1  0  1
     1  1  0
 echo 6 ^ 10; //12; в двоичной системе 1100

* Поразрядное отрицание
 ~ a - результат, у которого на месте единиц в 'a' стоят нули, и наоборот
    a result
    0 1
    1 0
  echo 6; -7
  echo 10; -11

* a << b - число, полученное поразрядным сдвигом 'a' на 'b' битов влево
 echo 6 << 1; //12; 0110 -> 1100; 12 в двоичной системе 1100

* a >> b - число, полученное поразрядным сдвигом 'a' на 'b' битов вправо
 echo 6 >> 1; //3; 0110 -> 0011; 3 в двоичной системе 0011
*/


/**
 * ******** Особенности операторов == и !=

  echo false; //пустая строка
  echo true;  //1

 $num = 100;
 if ($num == 1) echo 'ok, 1';                    //
 if ($num == true) echo 'ok, true';              //ok, true
 if ('' == 0) echo 'совпадение';                 //
 if ("Universe" == 0) echo "совпадение!";        //
 if ((int)"Universe" == 0) echo "совпадение!";   //совпадение!
*/

/**
 * ********  Сравнение сложных переменных   *********

    $x = [1, 2, "3"];
    $y = [1, 2, 3];
    $z = [1, 2, true];

    if ($x == $y) echo 'ok';   //ok
    if ($x === $y) echo 'ok';  //

    if ($z == $y) echo 'ok';   //ok
    if ($x === $y) echo 'ok';  //

    class AgentSmith {};
    $smit = new AgentSmith();
    $wesson = new AgentSmith();

    if ($smit == $wesson) echo 'ok'; //ok
    if ($smit === $wesson) echo 'ok'; //

    $a <=> $b
    выведет:
    1 если $a больше $b
    0 если $a и $b равны
   -1 если $a меньше $b
*/

/**
 *  ********* Оператор @  **********
 */
?>
<form action="operations.php">
    <input type="submit" name="doGo" value="Click">
</form>
<?php
//Warning: Undefined array key "doGO" in operations.php on line 146
if ($_REQUEST['doGO']) echo 'Вы нажали кнопку';
//Предупреждений не будет
if (@$_REQUEST['doGO']) echo 'Вы нажали кнопку';
//Лучший вариант
if (isset($_REQUEST['doGO'])) echo 'Вы нажали кнопку';


/**
 *  *********  Тернарные операции   **********

 $var = $value ?: "Другое значение";
 // еквивалентно
 $var = $value ? $value : "Другое значение";
 // еквивалентно
 if ($var) {
     $var = $value;
 } else {
     $var = "Другое значение";
 }

 $var = $value ?? "Другое значение";
 // еквивалентно
 $var = isset($value) ? $value : "Другое значение";
*/
//преобразовать все числа в положительные
$arr = [1, 4, 7, 4, -2, -6, -32, 45, -97];
foreach ($arr as $value) {
    $new[] = $value < 0 ? -$value : $value;
//   Аналогичная засись
//    if ($value < 0) {
//        $new[] = -$value;
//    }else {
//        $new[] = $value;
//    }
}
//$new = [1, 4, 7, 4, 2, 6, 32, 45, 97];